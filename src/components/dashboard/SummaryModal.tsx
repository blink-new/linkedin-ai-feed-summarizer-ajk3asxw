import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { Calendar, TrendingUp, Mail, FileText, X, Download, Share2 } from 'lucide-react'
import { FeedSummary } from '@/types'

interface SummaryModalProps {
  summary: FeedSummary
  onClose: () => void
}

export function SummaryModal({ summary, onClose }: SummaryModalProps) {
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    })
  }

  const formatTime = (dateString: string) => {
    return new Date(dateString).toLocaleTimeString('en-US', {
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  const handleDownload = () => {
    const content = `
LinkedIn Feed Summary - ${formatDate(summary.date)}

SUMMARY
${summary.summary}

KEY TOPICS
${summary.keyTopics.map(topic => `‚Ä¢ ${topic}`).join('\n')}

STATISTICS
‚Ä¢ Posts Analyzed: ${summary.postCount}
‚Ä¢ Generated: ${formatDate(summary.createdAt)} at ${formatTime(summary.createdAt)}
‚Ä¢ Email Sent: ${summary.sentToEmail ? 'Yes' : 'No'}
‚Ä¢ Saved to Notion: ${summary.savedToNotion ? 'Yes' : 'No'}

---
Generated by LinkedIn Feed Summarizer
Powered by Gemini 2.5 Flash AI
`

    const blob = new Blob([content], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `linkedin-summary-${summary.date}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const handleShare = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: `LinkedIn Feed Summary - ${formatDate(summary.date)}`,
          text: summary.summary.substring(0, 200) + '...',
          url: window.location.href
        })
      } catch (error) {
        console.log('Share cancelled')
      }
    } else {
      // Fallback: copy to clipboard
      const shareText = `LinkedIn Feed Summary - ${formatDate(summary.date)}\n\n${summary.summary.substring(0, 200)}...\n\nGenerated by LinkedIn Feed Summarizer`
      navigator.clipboard.writeText(shareText)
      alert('Summary copied to clipboard!')
    }
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="p-6 border-b bg-gradient-to-r from-[#0A66C2] to-[#00A0DC] text-white">
          <div className="flex items-center justify-between">
            <div className="space-y-2">
              <h2 className="text-2xl font-semibold flex items-center">
                <Calendar className="w-6 h-6 mr-3" />
                {formatDate(summary.date)}
              </h2>
              <div className="flex items-center space-x-4 text-blue-100">
                <span className="flex items-center">
                  <TrendingUp className="w-4 h-4 mr-1" />
                  {summary.postCount} posts analyzed
                </span>
                <span>‚Ä¢</span>
                <span>Generated at {formatTime(summary.createdAt)}</span>
              </div>
            </div>
            <Button variant="ghost" onClick={onClose} className="text-white hover:bg-white/20">
              <X className="w-5 h-5" />
            </Button>
          </div>
        </div>

        <div className="p-6 space-y-6">
          {/* Status Badges */}
          <div className="flex items-center space-x-3">
            {summary.sentToEmail && (
              <Badge variant="secondary" className="bg-blue-100 text-blue-800 border-blue-200">
                <Mail className="w-3 h-3 mr-1" />
                Email Sent
              </Badge>
            )}
            {summary.savedToNotion && (
              <Badge variant="secondary" className="bg-purple-100 text-purple-800 border-purple-200">
                <FileText className="w-3 h-3 mr-1" />
                Saved to Notion
              </Badge>
            )}
            {!summary.sentToEmail && !summary.savedToNotion && (
              <Badge variant="outline" className="text-gray-600">
                Local Only
              </Badge>
            )}
          </div>

          {/* Main Summary */}
          <Card>
            <CardHeader>
              <CardTitle className="text-xl">üìù Daily Summary</CardTitle>
              <CardDescription>
                AI-generated insights from your LinkedIn feed
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="prose max-w-none">
                {summary.summary.split('\n\n').map((paragraph, index) => (
                  <p key={index} className="text-gray-700 leading-relaxed mb-4 last:mb-0">
                    {paragraph}
                  </p>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Key Topics */}
          {summary.keyTopics.length > 0 && (
            <Card>
              <CardHeader>
                <CardTitle className="text-xl">üè∑Ô∏è Key Topics</CardTitle>
                <CardDescription>
                  Main themes and discussions from your feed
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
                  {summary.keyTopics.map((topic, index) => (
                    <div
                      key={index}
                      className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-3 text-center"
                    >
                      <span className="text-sm font-medium text-blue-800">{topic}</span>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}

          {/* Statistics */}
          <Card>
            <CardHeader>
              <CardTitle className="text-xl">üìä Summary Statistics</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-6">
                <div className="text-center">
                  <div className="text-2xl font-bold text-[#0A66C2]">{summary.postCount}</div>
                  <div className="text-sm text-gray-600">Posts Analyzed</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-[#0A66C2]">{summary.keyTopics.length}</div>
                  <div className="text-sm text-gray-600">Key Topics</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-[#0A66C2]">{summary.summary.split(' ').length}</div>
                  <div className="text-sm text-gray-600">Words</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-[#0A66C2]">
                    {Math.ceil(summary.summary.split(' ').length / 200)}
                  </div>
                  <div className="text-sm text-gray-600">Min Read</div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Footer Actions */}
        <div className="p-6 border-t bg-gray-50 flex justify-between items-center">
          <div className="text-sm text-gray-500">
            Generated by Gemini 2.5 Flash AI
          </div>
          <div className="flex space-x-3">
            <Button variant="outline" onClick={handleShare}>
              <Share2 className="w-4 h-4 mr-2" />
              Share
            </Button>
            <Button variant="outline" onClick={handleDownload}>
              <Download className="w-4 h-4 mr-2" />
              Download
            </Button>
            <Button onClick={onClose} className="bg-[#0A66C2] hover:bg-[#004182]">
              Close
            </Button>
          </div>
        </div>
      </div>
    </div>
  )
}